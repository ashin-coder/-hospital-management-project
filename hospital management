
 /* Define libraries to be included */
 #include <stdio.h>
 #include <malloc.h>
 #include <string.h>
 #include <ctype.h>
 #include<medicalrecords.h>
 /*----------------------------------------------------------------------------*/
 /* Define Functions*/
 void clearInput(void);
 void addmedicalrecords(void);
 void listAll(void);
 void deletemedicalrecords(void);
 void modifymedicalrecords(void);
 int findmedicalrecords(void);
 int prompt(void);
 int findnum (int);
 int findmedicalrecordphonenum(void);

/*----------------------------------------------------------------------------*/
/* Define Structures*/

    typedef struct medicalrecords {
    int number;        /*unique account number*/
    char name[20];     /*contains name*/
    char phone[15];    /*contains phone number*/
    char email[50];
    char address[100];
    int dateofentry[20];
    int Age[20];
    int dateofbirth[20];
    char gender[20];
    char disease[20];
    char prescribeddoctor[20];
    char height[20];
    char weight[20];
    char bloodgroup[20];



        struct medicalrecords *next; /*next is used to navigate through structures.*/
    int count;     /*count is used to input comments into array*/
    } medicalrecords;
medicalrecords *firstc,*currentc,*newc; /*pointers*/
/* firstc is used to point to first record in list
currentc points to current record in list
newc contains address of new structure/node
*/
int cnum = 0; /*gives unique account numbers*/


/*----------------------------------------------------------------------------*/
/* Main Function */

int main()
{
    FILE *datafile;
    char *filename = "Medical Records.dat";/*declare file name*/
    char ch;
    firstc = NULL;

    datafile = fopen(filename,"r");/* open file for reading*/

    if(datafile)
    {
	    firstc = (struct medicalrecords *)malloc(sizeof(struct medicalrecords));
    /*use of malloc to set aside memory relative to size of structure medicalrecords
*/
	    currentc = firstc;       /*make first record current*/
	    while(1) /*endless while loop. a NULL pointer in final node ends loop*/
     	    {
		    newc = (struct medicalrecords *)malloc(sizeof(struct medicalrecords));
		    fread(currentc,sizeof(struct medicalrecords),1,datafile);
		    if(currentc->next == NULL)   /* NULL indicates end of node list*/
			    break;
		    currentc->next = newc;       /* pointer referencing next node*/
            currentc->count=0;           /* initiates count for comments*/
		    currentc = newc;             /* make current record new*/
	    }
	    fclose(datafile);                /* close file - good practice to close files after use*/
	    cnum = currentc->number;

    }

    do
    {
	fflush(stdin);
        puts("\n      Welcome To ABC Hospital Medical Records Database");/* print menu messages*/
        puts("-- -----------------------------");
        puts("  1 - Add a Patient Record\n");
	    puts("  2 - Delete a Patient Record\n");
        puts("  3 - List all Patient  Records\n");
	    puts("  4 - Edit a Patient Records\n");
	    puts("  5 - Search a Patient Record\n ");
        puts("----- -------------------------------");
        puts("Q - Save and quit\n");
        printf("\tYour choice:");
        ch = getchar();
	    ch = toupper(ch);/* changes user input case to upper case */
        switch(ch)     /* stores in ch variable.*/
        {
            case '1':
                puts("\n Add a New Patient Record\n");
	        fflush(stdin);
                addmedicalrecords();// call add Medical Record function
                break;
	    case '2':
		puts("\n Delete a Patient a Record\n");
		deletemedicalrecords();
		break;
	    case '3':
		puts("\n List All Patient Records\n");
		listAll();
		break;
	    case '4':
		puts("\n Edit a Patient Record\n");
		modifymedicalrecords();
		break;

        case '5':
		puts("\n Search a Patient Record\n");
		findmedicalrecordphonenum();
		break;



            case 'Q':
                puts("Save and quit\n");
                default:
                break;
        }
    }
    while(ch != 'Q');

/*
 * Save the records to disk
 */
    currentc = firstc;

    if(currentc == NULL)
	    return(0);		/*no data to write*/

    datafile = fopen(filename,"w");   /*open file to write*/

    if(datafile == NULL)
    {
	    printf("Error writing to %s\n",filename);
	    return(1);
    }
    				/* Write each record to disk*/
    while(currentc != NULL)
    {
	    fwrite(currentc,sizeof(struct medicalrecords),1,datafile);
	    currentc = currentc->next;
    }
    fclose(datafile);             /*closes data file*/
    return(0);
}
/*----------------------------------------------------------------------------*/
void addmedicalrecords(void) /* add new medical records function*/
{
    newc = (struct medicalrecords *)malloc(sizeof(struct medicalrecords));
    /*allocates memory for new structure.*/

/*
 * Checks to see whether this is the first record in file
 * If so, then all pointers are initialized to this record,
 */

    if(firstc==NULL)
        firstc = currentc = newc;

/*
 * if not, end of structure list is obtained
 */

    else
    {
        currentc = firstc;      /* make the first record the current one*/


        while(currentc->next != NULL)currentc = currentc->next;
                                /* and loop through all records*/
        currentc->next = newc;  /* pointer to next node */
        currentc = newc;        /* make current record the new one*/
    }

/* update the structure */

    cnum++;
    printf("%27s: %5i\n","Medical Records",cnum);
    currentc->number = cnum;    /*cnum is used to give unique account numbers*/

    printf("%27s: ","\n  Enter Patient Name ");
    gets(currentc->name);

    printf("%27s: ","\n  Enter Patient Phone Number ");
    gets(currentc->phone);

    printf("%27s: ","\n  Enter Patient Email ID ");
    gets(currentc->email);

    printf("%27s: ","\n  Enter Patient Address ");
    gets(currentc->address);

    printf("%27s: ","\n  Enter Patient Data Entry Date ");
    gets(currentc->dateofentry);

    printf("%27s:","\n  Enter the Age of the Patient ");
    gets(currentc->Age);

     printf("%27s:","\n  Enter the Date of Birth of the Patient");
    gets(currentc->dateofbirth);

     printf("%27s:","\n  Enter Gender  of the Patient");
    gets(currentc->gender);

    printf("%27s:","\n  Enter Disease or illness felt by the Patient ");
    gets(currentc->disease);

    printf("%27s:","\n  Enter Prescribed Doctor ");
    gets(currentc->prescribeddoctor);

    printf("%27s:","\n  Enter Patient Height ");
    gets(currentc->height);

    printf("%27s:","\n  Enter Patient Weight ");
    gets(currentc->weight);

    printf("%27s:","\n  Enter Patient Blood Group ");
    gets(currentc->bloodgroup);


    printf("\n  Patient Record  Has been added! ");
    currentc->count=0;

/*
 * gives the new record a NULL pointer
 * to show it's the last record:
 */

    currentc->next = NULL;
}
/*----------------------------------------------------------------------------*/
void listAll(void) /* list all contacts function*/
{
    if(firstc==NULL)
        puts("There are No Patient Medical records to Display!"); /*prints message*/

    else
    {
	    printf("%6s %-20s %-15s %-30s %-15s %-15s %-15s %-15s %-25s %-25s %-15s %-15s %-15s\n","REGno","Name","Phone","Email","Date of Entry","Age","Date of Birth","Gender","Disease or Illness","Prescribed Doctor","Height","Weight","Blood Group");
        puts("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
                            /*prints table titles*/
        currentc=firstc;

        do
        {

                printf("%6d: %-20s %-15s %-30s %-15s %-15s %-15s %-15s %-25s %-25s %-15s %-15s %-15s\n",\
                currentc->number,\
                currentc->name,\
                currentc->phone,\
                currentc->email,\
                currentc->dateofentry,\
                currentc->Age,\
                currentc->dateofbirth,\
                currentc->gender,\
                currentc->disease,\
                currentc->prescribeddoctor,\
                currentc->height,\
                currentc->weight,\
                currentc->bloodgroup);

                /*prints values of number, name, phone ,email, date of entry ,age, date of birth, gender ,disease ,prescribed doctor, height ,weight ,bloodgroup*/
        }

        while((currentc=currentc->next) != NULL);
    }
}
/*----------------------------------------------------------------------------*/
void deletemedicalrecords(void)     /*delete contact function */
{
    int record;
    struct medicalrecords *previousa;

    if(firstc==NULL)
    {
        puts("There are no Patient Record to delete!");
	return;
    }

    listAll();		/* show all records*/
    printf("Enter REGno Number of the Patient Record to Delete: ");
    scanf("%d",&record);

    currentc = firstc;

    while(currentc != NULL)
    {
        if(currentc->number == record)
	{
	    if(currentc == firstc)	/*if record to be deleted is the first record*/
		firstc=currentc->next; /*reset firstc to point at next record as first*/
	    else
		previousa->next = currentc->next;/*previous pointer used if record*/
                                         /*to delete is not the first*/
        free(currentc); /*frees memory <deletes>*/
	    printf("Patient Record %d deleted!\n",record);
	    return;
	}

	else
	{
        previousa = currentc;
	    currentc = currentc->next;
	}
    }
    printf("Patient Record %d not found!\n",record);
 }
/*----------------------------------------------------------------------------*/
void modifymedicalrecords(void)   /*modify medical record function*/
{
    int record, result;

    if(firstc==NULL)
    {
        puts("There are No Patient Record to Modify!");
	return;
    }

    listAll();		/* show all records */
    printf("Enter Medicalrecords account number to Modify or Change: ");
    scanf("%d",&record);  /*scan user input to record*/

    result = findnum(record);

    if( result >0 ){
	    printf("REG No %d:\n",currentc->number);

	    printf("Name: %s\n",currentc->name);
	    if(prompt())
		    gets(currentc->name);

	    printf("Phone: %s\n",currentc->phone);
	    if(prompt())
		    gets(currentc->phone);

	    printf("Email: %s\n",currentc->email);
	    if(prompt())
		    gets(currentc->email);

		   printf("Address: %s\n",currentc->address);
	    if(prompt())
		    gets(currentc->address);


		   printf("Date of Entry: %s\n",currentc->dateofentry);
	    if(prompt())
		    gets(currentc->dateofentry);


		   if(prompt())
		    gets(currentc->Age);
        printf("Age: %s\n",currentc->Age);

           if(prompt())
		    gets(currentc->dateofbirth);
        printf("Dateofbirth: %s\n",currentc->dateofbirth);

          if(prompt())
		    gets(currentc->gender);
        printf("Gender: %s\n",currentc->gender);

         if(prompt())
		    gets(currentc->disease);
        printf("Disease or Illness: %s\n",currentc->disease);

        if(prompt())
		    gets(currentc->prescribeddoctor);
        printf("Prescribed Doctor: %s\n",currentc->prescribeddoctor);

        if(prompt())
		    gets(currentc->height);
        printf("Height:%s\n",currentc->height);

        if(prompt())
		    gets(currentc->weight);
        printf("Weight:%s\n",currentc->weight);

        if(prompt())
		    gets(currentc->bloodgroup);
        printf("Blood Group:%s\n",currentc->bloodgroup);

       return;
	}
    printf("Patient Record %d was not found!\n",record);
 }
/*----------------------------------------------------------------------------*/
 int findnum (int recordnum)
 {
    int record;
    record = recordnum;
    currentc = firstc;
    while(currentc != NULL)
    {

        if(currentc->number == record)
	     {
           return 1;
         }

	else
	{
	    currentc = currentc->next;
	}
    }
    return -1;
 }
/*----------------------------------------------------------------------------*/


 int prompt(void)
 {
	char ch;

    fflush(stdin);
	printf("Update? (Y to update any other key to not)");
	ch = getchar();
	ch = toupper(ch);
	fflush(stdin);
	if(ch == 'Y')
	{
		printf("Enter new value: ");
		return(1);
	}
	else
		return(0);

 }
/*----------------------------------------------------------------------------*/
  int findmedicalrecordphonenum(void) /* find  a Patient Medical Record function using  name and phone no*/
 {
     char buff[100];

     if(firstc==NULL)
	{
        puts("There are No Patient Data Available to be Find");
	    return 1;
    }

    printf("Enter Patient Name: ");
    fflush(stdin);/*clears any text from the input stream*/
    gets(buff);

    printf("Enter Patient phone: ");
    fflush(stdin);/*clears any text from the input stream*/
    gets(buff);


     currentc = firstc;

     currentc = firstc;

     while(currentc != NULL)

    {



         if( strcmp( currentc->name,buff) == 0 ,strcmp( currentc->phone,buff) == 0 )

	    {


 {
              /*prints table titles*/

            printf("REGNO:%6d\n\n Name: %-20s\n\n Phone: %-15s\n\n Email ID: %-30s\n\n Adresss: %-30s\n\n Date of Entry: %-15s\n\n Age: %-15s\n\n Date of Birth: %-15s\n\n Gender: %-15s\n\n Disease\Illness: %-25s\n\n Prescribeddoctors: %-25s\n\n Height: %-15s\n\n Weight: %-15s\n\n Blood Group: %-15s\n\n",\
            currentc->number,\
            currentc->name,\
            currentc->phone,\
            currentc->email,\
            currentc->address,\
            currentc->dateofentry,\
            currentc->Age,\
            currentc->dateofbirth,\
            currentc->gender,\
            currentc->disease,\
            currentc->prescribeddoctor,\
            currentc->height,\
            currentc->weight,\
            currentc->bloodgroup);
            /*prints values of number, name, phone ,email,address,date of entry, age, date of birth, gender, disease, prescribed doctor,  height, weight,blood group*/

			return 0;

       }

	    }

		else
		{
			currentc = currentc->next;
		}
    }
    printf("Patient Record %s was not found!\n",buff);
          return 1;
}

